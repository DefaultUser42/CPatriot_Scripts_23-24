Notes for CyberPatriot Practice competition and just general competition notes. 

Useful sites with info on Linux Mint:
https://www.linuxbabe.com/security/ufw-firewall-debian-ubuntu-linux-mint-server
UFW info^

https://www.redhat.com/en/blog/linux-user-account-management
User management in Linux Mint 21^

https://www.makeuseof.com/linux-hardening-tips-sysadmins/
Linux hardening for new sysadmins^

https://github.com/trimstray/the-practical-linux-hardening-guide?tab=readme-ov-file#how-to-harden-linux
Practical guide to hardening Linux (Specifically red hat linux)^

https://search.brave.com/search?q=how+to+install+and+configure+fail2ban+on+linux+mint+221&summary=1&summary_og=880adf42e96727e07cf34d
Search conducted on Brave for how to install and configure fail2ban^




- In addition to the obvious security vulnerabilites that need to be addressed in Linux Mint 21, make sure to enable UFW or Uncomplicated Firewall. 
- UFW is a front-end for iptables. 
- systemctl status iptables-persistent # command to check for iptables-persistent, which is an iptables restore service. 
- disable said command with # sudo systemctl stop iptables-persistent # then # sudo systemctl disable iptables-persistent # remove with # sudo apt remove iptables-persistent
- check status of iptables with systemctl status iptables
- check UFW status with # sudo ufw status
- enable ports 22, 80, 443, and 21 using command sudo ufw allow 22,80,443,21/tcp, sudo ufw logging on, then sudo ofw logging medium, then sudo ufw enable, then sudo ufw status verbose, then sudo systemctl enable ufw
- Make sure that IPv6 is enabled in UFW by ensuring that IPv6=yes in the /etc/default/ufw file. 
- IPv6 rules should always be placed after the IPv4 rules in sequence. 
- Remember logout command in linux terminal when logging into other people's accounts that are not the auto-login account. 
- Also don't forget to manage startup applications next round. 
- To check if a user exists in Linux type # passwd -S account_name 
- To expire individual passwords in Mint 21, you can use the following command: sudo passwd -e msmith
- Apply protection to home directories for all users. # chmod -v 700 $HOME
- Should you have to undo the last command, you can use chmod -v 750 $HOME. 
- sudo apt-get remove orca speech-dispatcher # removes speech dispatcher which is a screen reader for diabled people. 
- Use update manager GUI.
- Enable automatic updates through the GUI update manager. 
- sudo mintupdate-automation upgrade enable # configure automatic updates from the terminal. 
- awk -F: '($2 == "") {print}' /etc/shadow # command to check all users for passwords and return the users that don't have a password. Lock all user accounts that do not have passwords. 
- Avoid using legacy communication methods. 
- apt-get --purge remove xinetd nis tftpd tftpd-hpa telnetd \ "> rsh-server rsh-redone-server" # command(s) to remove outdated communication methods. 
- {
PermitRootLogin no # disables root login
MaxAuthTries 3 # limits authentication attempts
PasswordAuthentication no # disables password authentication
PermitEmptyPasswords no # disables empty passwords
X11Forwarding no # disables GUI transmission
DebianBanner no # disbales verbose banner
AllowUsers *@XXX.X.XXX.0/24 # restrict users to an IP range
}
- Commands to increase security on debian based systems ^ 
- CRON is a diverse job scheduler that can be exploited by users for malicious purposes.
- echo $(whoami) >> /etc/cron.d/cron.allow # command to block all users except from you from using CRON. 
- echo 'password sufficient pam_unix.so use_authtok md5 shadow remember=5' >> \ > /etc/pam.d/common-password # restricts password use
- apt list -- installed # lists all installed packages so that you can delete unused packages that could be security vulnerabilites
- {
kernel.randomize_va_space=2 # randomnize address base for mmap, heap, and stack
kernel.panic=10 # reboot after 10 sec following a kernel panic

net.ipv4.icmp_ignore_bogus_error_responses # protects bad error messages
net.ipv4.ip_forward=0 # disables IP forwarding
net.ipv4.icmp_ignore_bogus_error_responses=1 # ignores ICP errors
}
- Another effective way of Linux hardening is securing the kernel parameters. You can configure these parameters using sysctl or by modifying the configuration file. Below are some common configurations.
- {
-A INPUT -j REJECT # reject all inbound requests
-A FORWARD -j REJECT # reject traffic forwarding

-A INPUT -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT # allow traffic on localhost

# allow ping requests
-A OUTPUT -p icmp -j ACCEPT # allow outgoing pings

# allow established/related connections
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# allow DNS lookups
-A OUTPUT -p udp -m udp --dport 53 -j ACCEPT

# allow http/https requests
-A OUTPUT -p tcp -m tcp --dport 80 -m state --state NEW -j ACCEPT
-A OUTPUT -p tcp -m tcp --dport 443 -m state --state NEW -j ACCEPT

# allow SSH access
-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
-A OUTPUT -p tcp -m tcp --dport 22 -j ACCEPT
}
- Secure iptables with the previous commands.
- {
/var/log/auth.log --- logs authorization attempts
/var/log/daemon.log --- logs background apps
/var/log/debug --- logs debugging data
/var/log/kern.log --- logs kernel data
/var/log/syslog --- logs system data
/var/log/faillog --- logs failed logins
}
- Different type of loggers that can be leveraged ^
- sudo apt install fail2ban # Installs fail2ban which is a fail safe brute force password attack prevention software, I think?
- sudo nano /etc/fail2ban/jail.local # Create a new config file for fail2ban
- {
[sshd]
port    = ssh
logpath = /var/log/auth.log
maxretry = 5
findtime = 600
bantime  = 3600
ignoreip = 127.0.0.1/8 192.168.1.100/24
}
- Add the previous lines to the file ^
- {
port specifies the SSH port (default is 22)
logpath specifies the log file to monitor (in this case, /var/log/auth.log)
maxretry sets the maximum number of failed login attempts before banning (5 in this example)
findtime sets the time window (in seconds) for counting failed login attempts (600 seconds = 10 minutes)
bantime sets the ban duration (in seconds) for banned IP addresses (3600 seconds = 1 hour)
ignoreip specifies IP addresses to ignore (in this example, the loopback address and a specific IP address)
}
- Save and close the file
- sudo systemctl restart fail2ban # restart the service
- sudo systemctl status fail2ban # Verify the status of fail2ban
- You can tweak the behavior of fail2ban by messing with other config files such as '/etc/fail2ban/fail2ban.conf' and '/etc/fail2ban/jail.conf'
- 
